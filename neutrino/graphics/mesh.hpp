////////////////////////////////////////////////////////////////////////////////
/// @file
/// @brief Mesh.
/// @author Fedorov Alexey
/// @date 21.04.2019
////////////////////////////////////////////////////////////////////////////////

// =============================================================================
// MIT License
//
// Copyright (c) 2017-2019 Fedorov Alexey
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// =============================================================================

#ifndef FRAMEWORK_GRAPHICS_MESH_HPP
#define FRAMEWORK_GRAPHICS_MESH_HPP

#include <vector>

#include <common/types.hpp>
#include <graphics/color_type.hpp>
#include <math/math.hpp>

namespace framework::graphics
{
////////////////////////////////////////////////////////////////////////////////
/// @addtogroup graphics_module
/// @{
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/// @brief Mesh.
///
/// Meshes contain vertex data (positions, normals, texture coordinates etc.)
/// and triancle indices. All vertex data must be in arrays of the same size.
/// For example, if you have a mesh of 100 Vertices, positions, normals and
/// other arrays must being 100 in size. Data for i-th vertex is at index "i"
/// in each array.
////////////////////////////////////////////////////////////////////////////////
class Mesh
{
public:
    using VertexData  = std::vector<math::vector4f>;
    using IndicesData = std::vector<std::uint32_t>;

    ////////////////////////////////////////////////////////////////////////////
    /// @brief Creates Mesh instance.
    ////////////////////////////////////////////////////////////////////////////
    Mesh();

    ////////////////////////////////////////////////////////////////////////////
    /// @brief Destructor
    ////////////////////////////////////////////////////////////////////////////
    ~Mesh();

    ////////////////////////////////////////////////////////////////////////////
    /// @brief Copy Mesh.
    ///
    /// Creates new Mesh with new InstanceId.
    ///
    /// @param other Mesh to copy from.
    ////////////////////////////////////////////////////////////////////////////
    Mesh(const Mesh& other);

    ////////////////////////////////////////////////////////////////////////////
    /// @brief Copy Mesh.
    ///
    /// Creates new Mesh with new InstanceId.
    ///
    /// @param other Mesh to copy from.
    ///
    /// @return Copyed mesh instance.
    ////////////////////////////////////////////////////////////////////////////
    Mesh& operator=(const Mesh& other);

    ////////////////////////////////////////////////////////////////////////////
    /// @brief Move Mesh.
    ///
    /// @param other Mesh to move from.
    ////////////////////////////////////////////////////////////////////////////
    Mesh(Mesh&& other) noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// @brief Move Mesh.
    ///
    /// @param other Mesh to move from.
    ///
    /// @return Moved mesh instance.
    ////////////////////////////////////////////////////////////////////////////
    Mesh& operator=(Mesh&& other) noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// @brief Assign new vertex positions data to Mesh.
    ///
    /// @param vertices New vertex data.
    ////////////////////////////////////////////////////////////////////////////
    void set_vertices(const VertexData& vertices);

    ////////////////////////////////////////////////////////////////////////////
    /// @brief Assign new vertex positions data to Mesh.
    ///
    /// @param vertices New vertex data.
    ////////////////////////////////////////////////////////////////////////////
    void set_vertices(VertexData&& vertices) noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// @brief Assign new indices data to Mesh.
    ///
    /// @param vertices New indices.
    ////////////////////////////////////////////////////////////////////////////
    void set_indices(const IndicesData& indices);

    ////////////////////////////////////////////////////////////////////////////
    /// @brief Sets new indices data to Mesh.
    ///
    /// @param vertices New indices.
    ////////////////////////////////////////////////////////////////////////////
    void set_indices(IndicesData&& indices) noexcept;

    ////////////////////////////////////////////////////////////////////////////
    /// @brief Remove all data from Mesh.
    ///
    /// If Mesh loaded to Render, it's can be freely cleaned.
    ///
    /// @see Render::load.
    ////////////////////////////////////////////////////////////////////////////
    void clear();

    ////////////////////////////////////////////////////////////////////////////
    /// @brief Get Mesh instance id. Guaranted to be unique.
    ///
    /// @return Mesh instance id.
    ////////////////////////////////////////////////////////////////////////////
    InstanceId instance_id() const;

    ////////////////////////////////////////////////////////////////////////////
    /// @brief Get vertices position data.
    ///
    /// @return Vertices positions.
    ////////////////////////////////////////////////////////////////////////////
    const VertexData& vertices() const;

    ////////////////////////////////////////////////////////////////////////////
    /// @brief Get indices data.
    ///
    /// @return Indices.
    ////////////////////////////////////////////////////////////////////////////
    const IndicesData& indices() const;

private:
    friend void swap(Mesh& lhs, Mesh& rhs) noexcept;

    InstanceId m_instance_id;
    VertexData m_vertices;
    IndicesData m_indexes;
};

////////////////////////////////////////////////////////////////////////////////
/// @brief Swaps two Meshes.
///
/// @param lhs Mesh to swap.
/// @param rhs Mesh to swap.
////////////////////////////////////////////////////////////////////////////////
void swap(Mesh& lhs, Mesh& rhs) noexcept;

////////////////////////////////////////////////////////////////////////////////
/// @}
////////////////////////////////////////////////////////////////////////////////
} // namespace framework::graphics

#endif
